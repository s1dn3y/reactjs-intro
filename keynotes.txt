Introdução
	- Apresentação do ReactJS
	- É uma lib e não um framework
		- Usar ReactJS com AngularJS ou Vue.JS?
			. nada de outro mundo, já que ReactJS é uma lib e foca na só view 
	- "V" de MVC
	- Manipular o DOM é quase um DOOM!
		- Virtual DOM 
			. Um modelo/representação do DOM - é um objetos JavaScript
			. Permite computar as diferenças [diffing] entre o real e o virtual
			. Permite aplicar [patch] somente as diferenças no DOM real
			. Ganho de performance na renderização do DOM real
	- Propósito: reutilização

	- Exemplo 01 - Olá mundo!
		- Instalação do ReactJS
		- Olá mundo!

Indo além do Olá Mundo
	- Validador de CPF em ReactJS
	- Exemplo 02
		- Demonstra
			. React (cria elementos e componentes)
			. ReactDOM (atua sobre o DOM)
		- Problema
			. Código dentro do index.html (ainda)
			. Não é reutilizável e muito verboso (seria melhor fazer usando HTML!!!)

Rumo a Tóquio
	. O propósito do ReactJS é a componentização (reutilização)
	- Atributos especiais para os elementos
		- class e for
			. Usar as propriedades correlatas (className e htmlFor)
			. São palavras reservadas no JavaScript, e o vDOM é um objeto JS

		- style
			. O valor não pode ser string, tem que ser um objeto
			- Por que dentro de um objeto, e não como uma string (como no html)?
				- performance (e simplicidade também)
					. se o vDOM é um objeto (JS), é muito mais rápido e simples
					alimentá-lo com base em outro objeto, do que com o conteúdo
					de uma string (que demanda parsing)

	- Exemplo 03 - Iniciando a componentização do validador de cpf
		- Demonstra
			- Alterações básicas para reutilização
				. Código reutilizável extraído para arquivo
				. Uso de propriedades nos componentes (evitando código hard coded como o do exemplo 2)
			. Uso de htmlFor e style
		- Problemas
			. Ainda tem código no index.html
			. Ainda é muito verboso (muito boilerplate)
			. Não favorece o trabalho de UI (um diagramador não e animaria a mexer em código JS)
			. O estado do componente depende do DOM
	- Web Standards
		. Código HTML/XHTML válidos
		. Código semanticamente correto (usar tags apropriadas, conforme seus propósitos)
		- Separar
			. Conteúdo (HTML/XHTML)
			. Apresentação (CSS)
			. Interatividade (JavaScript)
	- Exemplo 04 - ...
		- Demonstra
			. Mover Código JS do index.html para arquivo app.js ()
			- Em concordância com Web Standards
				. Mover CSS inline para arquivo css
				. Uso de className em vez de style (inline)
		- Problemas
			. Ainda é muito verboso (muito boilerplate)
			. Ainda não favorece o trabalho de UI
			. O estado do componente ainda depende do DOM
	- Componentes com estado
		...
		- Exemplo 05
			- Demonstra
				. this.propTypes
				. this.state
			- Problemas
				. Ainda é muito verboso (muito boilerplate)
				. Ainda não favorece o trabalho de UI


Exemplo 99 - JSX
	- https://facebook.github.io/react/docs/react-without-jsx.html
	- Bem menos verboso
	- Favorece o  a  (*com ressalvas)
	- Sinceramente/sem frescura: eh tranquilo para devs!!!
		
		
